/*  Prim's algorithm

1.  Make a queue (Q) with all the vertices of G (V);
2.  For each member of Q set the priority to INFINITY;
3.  Only for the starting vertex (s) set the priority to 0;
4.  The parent of (s) should be NULL;
5.  While Q isn’t empty
6.     Get the minimum from Q – let’s say (u); (priority queue);
7.     For each adjacent vertex to (v) to (u)
8.        If (v) is in Q and weight of (u, v) < priority of (v) then
9.           The parent of (v) is set to be (u)
10.          The priority of (v) is the weight of (u, v)
*/

INFINITY = Integer.MAX_VALUE;

Vertice = id => Scope( 'id -> id, 'edges -> List(), 'parent -> null, 'next -> null );
Edge = ( vert1, vert2, weight ) => ( result = Scope( 'weight -> weight, 'vert1 -> vert1, 'vert2 -> vert2 ); vert1.edges.add( result ); vert2.edges.add( result ); result );

vert0 = Vertice( 0 ); vert1 = Vertice( 1 ); vert2 = Vertice( 2 ); vert3 = Vertice( 3 ); vert4 = Vertice( 4 ); vert5 = Vertice( 5 ); vert6 = Vertice( 6 ); vert7 = Vertice( 7 ); vert8 = Vertice( 8 );

Edge( vert0, vert1, 4 ); Edge( vert0, vert8, 8 );
Edge( vert1, vert2, 8 ); Edge( vert1, vert8, 11 );
Edge( vert2, vert3, 7 ); Edge( vert2, vert5, 4 ); Edge( vert2, vert6, 2 );
Edge( vert3, vert4, 9 ); Edge( vert3, vert5, 14 );
Edge( vert4, vert5, 10 );
Edge( vert5, vert7, 2 );
Edge( vert6, vert7, 6 ); Edge( vert6, vert8, 7 );
Edge( vert7, vert8, 1 );

graph = List( vert0, vert1, vert2, vert3, vert4, vert5, vert6, vert7, vert8 );


queue = Map(); graph.foreach( vertice => queue( vertice ) = INFINITY );
start = vert5; queue( start ) = 0;
 
while( queue )
{
	// get the minimum value
	priority = INFINITY; u = null;
	queue.foreach( ( v, p ) => if( p < priority ) u = v, priority = p );

	u.edges.foreach( uv =>
	{
		v = if( uv.vert1 == u ) uv.vert2 else uv.vert1;
		if( queue.containsKey( v ) && uv.weight < queue( v ) )
		(
			v.parent = u; u.next = v; println( s"${u.id} --> ${v.id}" );
			queue( v ) = uv.weight;
		);
    });
    
	queue.remove( u );
};

v = graph.find( v => graph.find( u => u.parent == v ) == null );
while( v != null )( print( v.id ); v = v.parent; ); println();
while( start != null )( print( start.id ); start = start.next; ); println();
